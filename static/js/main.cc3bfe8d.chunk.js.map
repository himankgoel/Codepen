{"version":3,"sources":["Components/Editor.js","hooks/useLocalStorage.js","Components/App.js","index.js"],"names":["Editor","props","useState","open","setOpen","language","displayName","value","onChange","className","onClick","prevOpen","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4LAQe,SAASA,EAAOC,GAAQ,IAAD,EAEXC,oBAAS,GAFE,mBAE3BC,EAF2B,KAEtBC,EAFsB,KAG3BC,EAA0CJ,EAA1CI,SAAWC,EAA+BL,EAA/BK,YAAYC,EAAmBN,EAAnBM,MAAMC,EAAaP,EAAbO,SAKpC,OACI,yBAAKC,UAAS,2BAAsBN,EAAO,GAAK,cAC5C,yBAAKM,UAAU,gBACVH,EACD,uBAAIG,UAAS,iBAAYN,EAAO,WAAa,SAAhC,QACTO,QAAS,kBAAMN,GAAQ,SAAAO,GAAQ,OAAKA,SAIhD,kBAAC,aAAD,CACIC,eAbR,SAAsBC,EAAOC,EAAKP,GAC9BC,EAASD,IAaLA,MAAOA,EACPE,UAAU,sBACVM,QAAS,CACLC,cAAe,EACfC,MAAK,EACLC,KAAKb,EACLc,MAAQ,WACRC,aAAc,MC9Bf,SAASC,EAAgBC,EAAIC,GACxC,IAAMC,EAHK,gBAGkBF,EADyB,EAE7BpB,oBAAS,WAC9B,IAAMuB,EAAYC,aAAaC,QAAQH,GACvC,OAAiB,OAAdC,EAA2BG,KAAKC,MAAMJ,GAEd,oBAAjBF,EACCA,IAEAA,KATuC,mBAE/ChB,EAF+C,KAEzCuB,EAFyC,KAgBvD,OAJKC,qBAAU,WACNL,aAAaM,QAAQR,EAAYI,KAAKK,UAAU1B,MAClD,CAACiB,EAAYjB,IAEb,CAACA,EAAMuB,GCoCFI,MArDf,WAAgB,IAAD,EACWb,EAAgB,OAAO,IADlC,mBACNc,EADM,KACAC,EADA,OAESf,EAAgB,MAAM,IAF/B,mBAENgB,EAFM,KAEDC,EAFC,OAGOjB,EAAgB,KAAK,IAH5B,mBAGNkB,EAHM,KAGFC,EAHE,OAIctC,mBAAS,IAJvB,mBAINuC,EAJM,KAICC,EAJD,KAiBb,OAXAX,qBAAW,WACT,IAAMY,EAAUC,YAAW,WACzBF,EAAU,2BAAD,OAEGP,EAFH,qCAGIE,EAHJ,uCAIKE,EAJL,kCAMT,KACF,OAAO,kBAAMM,aAAaF,MAC1B,CAACR,EAAKE,EAAIE,IAEZ,oCACE,yBAAK9B,UAAU,iBACb,kBAACT,EAAD,CACEK,SAAS,MACTC,YAAY,OACZC,MAAO4B,EACP3B,SAAU4B,IAEZ,kBAACpC,EAAD,CACEK,SAAS,MACTC,YAAY,MACZC,MAAO8B,EACP7B,SAAU8B,IAEZ,kBAACtC,EAAD,CACEK,SAAS,aACTC,YAAY,KACZC,MAAOgC,EACP/B,SAAUgC,KAGd,yBAAK/B,UAAU,QACb,4BACEgC,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,YC7CfC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U","file":"static/js/main.cc3bfe8d.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport \"codemirror/lib/codemirror.css\";\r\nimport \"codemirror/theme/material.css\";\r\nimport \"codemirror/mode/xml/xml\"; //HTML \r\nimport \"codemirror/mode/javascript/javascript\";\r\nimport \"codemirror/mode/css/css\";\r\n\r\nimport {Controlled as ControlledEditor} from \"react-codemirror2\";\r\nexport default function Editor(props) {\r\n\r\n    const [open,setOpen] = useState(true);\r\n    const {language , displayName,value,onChange } = props;\r\n\r\n    function handleChange(editor,data,value){\r\n        onChange(value);\r\n    }\r\n    return (\r\n        <div className={`editor-container ${open ? '' : 'collapsed'}`}>\r\n            <div className=\"editor-title\">\r\n                {displayName}\r\n                <i  className={`fas fa-${open ? 'compress' : 'expand'}-alt`}\r\n                    onClick={() => setOpen(prevOpen => !prevOpen)}>\r\n                </i>\r\n                \r\n            </div>\r\n        <ControlledEditor \r\n            onBeforeChange={handleChange}\r\n            value={value}\r\n            className=\"code-mirror-wrapper\"\r\n            options={{\r\n                lineWrapping : true,\r\n                lint:true,\r\n                mode:language,\r\n                theme : 'material',\r\n                lineNumbers : true\r\n            }}\r\n        />\r\n        </div>\r\n    )\r\n}","import {useState,useEffect}from 'react'\r\n\r\nconst PREFIX = 'codepen-clone';\r\n\r\nexport default function useLocalStorage(key,initialValue) {\r\n    const prefixedKey = PREFIX + key;\r\n    const [value,setValue] = useState(() => {\r\n        const jsonValue = localStorage.getItem(prefixedKey)\r\n        if(jsonValue !== null) return JSON.parse(jsonValue)\r\n\r\n        if(typeof initialValue === \"function\"){\r\n            return initialValue()\r\n        }else{\r\n            return initialValue\r\n        }\r\n    })\r\n        useEffect(() => {\r\n            localStorage.setItem(prefixedKey,JSON.stringify(value))\r\n        },[prefixedKey,value])\r\n\r\n   return [value,setValue];\r\n}\r\n","import React , {useEffect, useState} from 'react';\nimport Editor from \"./Editor\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nfunction App() {\n  const [html, setHtml] = useLocalStorage('html','');\n  const [css, setCss] = useLocalStorage('css','');\n  const [js, setJs] = useLocalStorage('js','');\n  const [srcDoc,setSrcDoc] = useState('');\n\n  useEffect (() => {\n    const timeout = setTimeout(() => {\n      setSrcDoc(\n        `<html>\n          <body>${html}</body>\n          <style>${css}</style>\n          <script>${js}</script>\n        </html>`)\n    },250)\n    return () => clearTimeout(timeout)\n  },[html,css,js])\n  return (\n  <>\n    <div className=\"pane top-pane\">\n      <Editor \n        language=\"xml\"\n        displayName=\"HTML\"\n        value={html}\n        onChange={setHtml}\n        />\n      <Editor \n        language=\"css\"\n        displayName=\"CSS\"\n        value={css}\n        onChange={setCss}\n      />\n      <Editor \n        language=\"javascript\"\n        displayName=\"JS\"\n        value={js}\n        onChange={setJs}\n      />\n    </div>\n    <div className=\"pane\">\n      <iframe \n        srcDoc={srcDoc}\n        title=\"output\" \n        sandbox=\"allow-scripts\" \n        frameBorder=\"0\"\n        width=\"100%\"\n        height=\"100%\"\n      />\n    </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './Components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}